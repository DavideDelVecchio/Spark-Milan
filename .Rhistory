# Load Data to Spark DataFrames -------------------------------------------
airlineDF <- spark_read_csv(sc = sc,
name = "airline",
path = "/FlightData/AirlineSubsetCsv",
header = TRUE,
infer_schema = TRUE,
null_value = "null")
weatherDF <- spark_read_csv(sc = sc,
name = "weather",
path = "/FlightData/WeatherSubsetCsv",
header = TRUE,
infer_schema = TRUE,
null_value = "null")
# Rename Airline Columns --------------------------------------------------
library(stringr)
airNames <- colnames(airlineDF)
newNames <- gsub('\\_(\\w?)', '\\U\\1', tolower(airNames), perl=T)
airlineDF <- airlineDF %>% setNames(newNames)
# Join --------------------------------------------------------------------
# Select desired columns from the flight data.
varsToKeep <- c("arrDel15", "year", "month", "dayOfMonth",
"dayOfWeek", "uniqueCarrier", "originAirportId",
"destAirportId", "crsDepTime", "crsArrTime",
"tailNum", "distance", "arrDelayNew")
airlineDF <- select_(airlineDF, .dots = varsToKeep)
weatherSummary <- weatherDF %>%
group_by(AdjustedYear, AdjustedMonth, AdjustedDay, AdjustedHour, AirportID) %>%
summarise(Visibility = mean(Visibility),
DryBulbCelsius = mean(DryBulbCelsius),
DewPointCelsius = mean(DewPointCelsius),
RelativeHumidity = mean(RelativeHumidity),
WindSpeed = mean(WindSpeed),
Altimeter = mean(Altimeter))
#######################################################
# Join airline data with weather at Origin Airport
#######################################################
originDF <- left_join(x = airlineDF,
y = weatherSummary,
by = c("originAirportId" = "AirportID",
"year" = "AdjustedYear",
"month" = "AdjustedMonth",
"dayOfMonth"= "AdjustedDay",
"crsDepTime" = "AdjustedHour"))
# Remove redundant columns ------------------------------------------------
vars <- colnames(originDF)
varsToDrop <- c('AdjustedYear', 'AdjustedMonth', 'AdjustedDay', 'AdjustedHour', 'AirportID')
varsToKeep <- vars[!(vars %in% varsToDrop)]
originDF <- select_(originDF, .dots = varsToKeep)
originDF <- originDF %>% rename(VisibilityOrigin = Visibility,
DryBulbCelsiusOrigin = DryBulbCelsius,
DewPointCelsiusOrigin = DewPointCelsius,
RelativeHumidityOrigin = RelativeHumidity,
WindSpeedOrigin = WindSpeed,
AltimeterOrigin = Altimeter)
#######################################################
# Join airline data with weather at Destination Airport
#######################################################
destDF <- left_join(x = originDF,
y = weatherSummary,
by = c("destAirportId" = "AirportID",
"year" = "AdjustedYear",
"month" = "AdjustedMonth",
"dayOfMonth"= "AdjustedDay",
"crsDepTime" = "AdjustedHour"))
# Rename Columns and Drop Reduncies ---------------------------------------
vars <- colnames(destDF)
varsToDrop <- c('AdjustedYear', 'AdjustedMonth', 'AdjustedDay', 'AdjustedHour', 'AirportID')
varsToKeep <- vars[!(vars %in% varsToDrop)]
airWeatherDF <- select_(destDF, .dots = varsToKeep)
airWeatherDF <- rename(airWeatherDF,
VisibilityDest = Visibility,
DryBulbCelsiusDest = DryBulbCelsius,
DewPointCelsiusDest = DewPointCelsius,
RelativeHumidityDest = RelativeHumidity,
WindSpeedDest = WindSpeed,
AltimeterDest = Altimeter)
airWeatherDF <- airWeatherDF %>% sdf_register("flightsweather")
tbl_cache(sc, "flightsweather")
# EDA ---------------------------------------------------------------------
delay <- airWeatherDF %>%
group_by(tailNum) %>%
summarise(count = n(),
dist = mean(distance),
delay = mean(as.numeric(arrDelayNew))) %>%
filter(count > 20, dist < 2000, !is.na(delay)) %>%
collect
# plot delays
library(ggplot2)
ggplot(delay, aes(dist, delay)) +
geom_point(aes(size = count), alpha = 1/2) +
geom_smooth() +
scale_size_area(max_size = 2)
ave_delay_carrier <- airWeatherDF %>% group_by(dayOfWeek, uniqueCarrier) %>%
summarise(aveDelay = mean(as.numeric(arrDelayNew))) %>%
collect
library(forcats)
ave_delay_carrier <- ave_delay_carrier %>% ungroup() %>%
mutate(dayOfWeek = fct_recode(factor(dayOfWeek),
"Monday" = "1",
"Tuesday" = "2",
"Wednesday" = "3",
"Thursday" = "4",
"Friday" = "5",
"Saturday" = "6",
"Sunday" = "7"))
ggplot(ave_delay_carrier) +
geom_bar(aes(x = dayOfWeek,
y = aveDelay,
fill = uniqueCarrier),
stat = 'identity') +
facet_wrap(~uniqueCarrier) +
coord_flip() + theme_minimal() + guides(fill = FALSE) +
labs(title = "Average Delay by Carrier and Day of Week",
subtitle = "(minutes)",
xlab = "Minutes",
ylab = "Carrier")
airWeatherDF
airWeatherDF %>% select(contains("dest"))
weatherSummary
originDF
originDF %>% select(contains("Origin"))
airlineDF %>% select(originAirportId, year, month, dayofMonth)
select(weather, AdjustedHour)
select(weatherSummary, AdjustedHour)
select(airlineDF, crsDepTime)
mutate(airlineDF, crsDepTime / 100)
mutate(airlineDF, depTime = crsDepTime / 100)
mutate(airlineDF, depTime = crsDepTime / 100) %>% select(depTime)
mutate(airlineDF, depTime = as.integer(crsDepTime / 100)) %>% select(depTime)
mutate(airlineDF, depTime = floor(crsDepTime / 100)) %>% select(depTime)
airlineDF %>% mutate(crsDepTime = floor(crsDepTime / 100))
airlineDF <- airlineDF %>% mutate(crsDepTime = floor(crsDepTime / 100))
weatherSummary <- weatherDF %>%
group_by(AdjustedYear, AdjustedMonth, AdjustedDay, AdjustedHour, AirportID) %>%
summarise(Visibility = mean(Visibility),
DryBulbCelsius = mean(DryBulbCelsius),
DewPointCelsius = mean(DewPointCelsius),
RelativeHumidity = mean(RelativeHumidity),
WindSpeed = mean(WindSpeed),
Altimeter = mean(Altimeter))
#######################################################
# Join airline data with weather at Origin Airport
#######################################################
originDF <- left_join(x = airlineDF,
y = weatherSummary,
by = c("originAirportId" = "AirportID",
"year" = "AdjustedYear",
"month" = "AdjustedMonth",
"dayOfMonth"= "AdjustedDay",
"crsDepTime" = "AdjustedHour"))
# Remove redundant columns ------------------------------------------------
vars <- colnames(originDF)
varsToDrop <- c('AdjustedYear', 'AdjustedMonth', 'AdjustedDay', 'AdjustedHour', 'AirportID')
varsToKeep <- vars[!(vars %in% varsToDrop)]
originDF <- select_(originDF, .dots = varsToKeep)
originDF <- originDF %>% rename(VisibilityOrigin = Visibility,
DryBulbCelsiusOrigin = DryBulbCelsius,
DewPointCelsiusOrigin = DewPointCelsius,
RelativeHumidityOrigin = RelativeHumidity,
WindSpeedOrigin = WindSpeed,
AltimeterOrigin = Altimeter)
#######################################################
# Join airline data with weather at Destination Airport
#######################################################
destDF <- left_join(x = originDF,
y = weatherSummary,
by = c("destAirportId" = "AirportID",
"year" = "AdjustedYear",
"month" = "AdjustedMonth",
"dayOfMonth"= "AdjustedDay",
"crsDepTime" = "AdjustedHour"))
# Rename Columns and Drop Reduncies ---------------------------------------
vars <- colnames(destDF)
varsToDrop <- c('AdjustedYear', 'AdjustedMonth', 'AdjustedDay', 'AdjustedHour', 'AirportID')
varsToKeep <- vars[!(vars %in% varsToDrop)]
airWeatherDF <- select_(destDF, .dots = varsToKeep)
airWeatherDF <- rename(airWeatherDF,
VisibilityDest = Visibility,
DryBulbCelsiusDest = DryBulbCelsius,
DewPointCelsiusDest = DewPointCelsius,
RelativeHumidityDest = RelativeHumidity,
WindSpeedDest = WindSpeed,
AltimeterDest = Altimeter)
airWeatherDF <- airWeatherDF %>% sdf_register("flightsweather")
tbl_cache(sc, "flightsweather")
airWeatherDF
airWeatherDF %>% select(WindSpeedDest)
airWeatherDF %>% select(WindSpeedDest, AltimeterDest)
airWeatherDF %>% select(WindSpeedDest, AltimeterDest, AltimeterOrigin)
delay <- airWeatherDF %>%
group_by(tailNum) %>%
summarise(count = n(),
dist = mean(distance),
delay = mean(as.numeric(arrDelayNew))) %>%
filter(count > 20, dist < 2000, !is.na(delay)) %>%
collect
# plot delays
library(ggplot2)
ggplot(delay, aes(dist, delay)) +
geom_point(aes(size = count), alpha = 1/2) +
geom_smooth() +
scale_size_area(max_size = 2)
ave_delay_carrier <- airWeatherDF %>% group_by(dayOfWeek, uniqueCarrier) %>%
summarise(aveDelay = mean(as.numeric(arrDelayNew))) %>%
collect
library(forcats)
ave_delay_carrier <- ave_delay_carrier %>% ungroup() %>%
mutate(dayOfWeek = fct_recode(factor(dayOfWeek),
"Monday" = "1",
"Tuesday" = "2",
"Wednesday" = "3",
"Thursday" = "4",
"Friday" = "5",
"Saturday" = "6",
"Sunday" = "7"))
ggplot(ave_delay_carrier) +
geom_bar(aes(x = dayOfWeek,
y = aveDelay,
fill = uniqueCarrier),
stat = 'identity') +
facet_wrap(~uniqueCarrier) +
coord_flip() + theme_minimal() + guides(fill = FALSE) +
labs(title = "Average Delay by Carrier and Day of Week",
subtitle = "(minutes)",
xlab = "Minutes",
ylab = "Carrier")
system.time(delayRF <- ml_linear_regression(splits$training,
response = "arrDelayNew",
features = c("dayOfWeek",
"uniqueCarrier", "originAirportId",
"destAirportId", "crsDepTime",
"RelativeHumidityOrigin",
"AltimeterOrigin", "DryBulbCelsiusOrigin",
"VisibilityOrigin", "DewPointCelsiusOrigin",
"WindSpeedOrigin", "RelativeHumidityDest",
"AltimeterDest", "DryBulbCelsiusDest",
"WindSpeedDest", "VisibilityDest",
"DewPointCelsiusDest")))
splits <- airWeatherDF %>%
sdf_partition(training = 0.75, test = 0.25, seed = 1099)
names(splits)
system.time(delayRF <- ml_linear_regression(splits$training,
response = "arrDelayNew",
features = c("dayOfWeek",
"uniqueCarrier", "originAirportId",
"destAirportId", "crsDepTime",
"RelativeHumidityOrigin",
"AltimeterOrigin", "DryBulbCelsiusOrigin",
"VisibilityOrigin", "DewPointCelsiusOrigin",
"WindSpeedOrigin", "RelativeHumidityDest",
"AltimeterDest", "DryBulbCelsiusDest",
"WindSpeedDest", "VisibilityDest",
"DewPointCelsiusDest")))
library(sparklyr)
library(tidyverse)
# Configure cluster (D13v2large 56G 8core 400GBdisk) ----------------------
conf <- spark_config()
conf$'sparklyr.shell.executor-memory' <- "16g"
conf$'sparklyr.shell.driver-memory' <- "16g"
conf$spark.executor.cores <- 4
conf$spark.executor.memory <- "16G"
conf$spark.yarn.am.cores  <- 4
conf$spark.yarn.am.memory <- "16G"
conf$spark.dynamicAllocation.enabled <- "false"
conf$spark.default.parallelism <- 8
# Connect to cluster ------------------------------------------------------
sc <- spark_connect(master = "yarn-client", config = conf)
# Load Data to Spark DataFrames -------------------------------------------
airlineDF <- spark_read_csv(sc = sc,
name = "airline",
path = "/FlightData/AirlineSubsetCsv",
header = TRUE,
infer_schema = TRUE,
null_value = "null")
weatherDF <- spark_read_csv(sc = sc,
name = "weather",
path = "/FlightData/WeatherSubsetCsv",
header = TRUE,
infer_schema = TRUE,
null_value = "null")
# Rename Airline Columns --------------------------------------------------
library(stringr)
airNames <- colnames(airlineDF)
newNames <- gsub('\\_(\\w?)', '\\U\\1', tolower(airNames), perl=T)
airlineDF <- airlineDF %>% setNames(newNames)
# Join --------------------------------------------------------------------
# Select desired columns from the flight data.
varsToKeep <- c("arrDel15", "year", "month", "dayOfMonth",
"dayOfWeek", "uniqueCarrier", "originAirportId",
"destAirportId", "crsDepTime", "crsArrTime",
"tailNum", "distance", "arrDelayNew")
airlineDF <- select_(airlineDF, .dots = varsToKeep)
airlineDF <- airlineDF %>% mutate(crsDepTime = floor(crsDepTime / 100))
weatherSummary <- weatherDF %>%
group_by(AdjustedYear, AdjustedMonth, AdjustedDay, AdjustedHour, AirportID) %>%
summarise(Visibility = mean(Visibility),
DryBulbCelsius = mean(DryBulbCelsius),
DewPointCelsius = mean(DewPointCelsius),
RelativeHumidity = mean(RelativeHumidity),
WindSpeed = mean(WindSpeed),
Altimeter = mean(Altimeter))
#######################################################
# Join airline data with weather at Origin Airport
#######################################################
originDF <- left_join(x = airlineDF,
y = weatherSummary,
by = c("originAirportId" = "AirportID",
"year" = "AdjustedYear",
"month" = "AdjustedMonth",
"dayOfMonth"= "AdjustedDay",
"crsDepTime" = "AdjustedHour"))
# Remove redundant columns ------------------------------------------------
vars <- colnames(originDF)
varsToDrop <- c('AdjustedYear', 'AdjustedMonth', 'AdjustedDay', 'AdjustedHour', 'AirportID')
varsToKeep <- vars[!(vars %in% varsToDrop)]
originDF <- select_(originDF, .dots = varsToKeep)
originDF <- originDF %>% rename(VisibilityOrigin = Visibility,
DryBulbCelsiusOrigin = DryBulbCelsius,
DewPointCelsiusOrigin = DewPointCelsius,
RelativeHumidityOrigin = RelativeHumidity,
WindSpeedOrigin = WindSpeed,
AltimeterOrigin = Altimeter)
#######################################################
# Join airline data with weather at Destination Airport
#######################################################
destDF <- left_join(x = originDF,
y = weatherSummary,
by = c("destAirportId" = "AirportID",
"year" = "AdjustedYear",
"month" = "AdjustedMonth",
"dayOfMonth"= "AdjustedDay",
"crsDepTime" = "AdjustedHour"))
# Rename Columns and Drop Reduncies ---------------------------------------
vars <- colnames(destDF)
varsToDrop <- c('AdjustedYear', 'AdjustedMonth', 'AdjustedDay', 'AdjustedHour', 'AirportID')
varsToKeep <- vars[!(vars %in% varsToDrop)]
airWeatherDF <- select_(destDF, .dots = varsToKeep)
airWeatherDF <- rename(airWeatherDF,
VisibilityDest = Visibility,
DryBulbCelsiusDest = DryBulbCelsius,
DewPointCelsiusDest = DewPointCelsius,
RelativeHumidityDest = RelativeHumidity,
WindSpeedDest = WindSpeed,
AltimeterDest = Altimeter)
airWeatherDF <- airWeatherDF %>% sdf_register("flightsweather")
tbl_cache(sc, "flightsweather")
# EDA ---------------------------------------------------------------------
delay <- airWeatherDF %>%
group_by(tailNum) %>%
summarise(count = n(),
dist = mean(distance),
delay = mean(as.numeric(arrDelayNew))) %>%
filter(count > 20, dist < 2000, !is.na(delay)) %>%
collect
# plot delays
library(ggplot2)
ggplot(delay, aes(dist, delay)) +
geom_point(aes(size = count), alpha = 1/2) +
geom_smooth() +
scale_size_area(max_size = 2)
ave_delay_carrier <- airWeatherDF %>% group_by(dayOfWeek, uniqueCarrier) %>%
summarise(aveDelay = mean(as.numeric(arrDelayNew))) %>%
collect
library(forcats)
ave_delay_carrier <- ave_delay_carrier %>% ungroup() %>%
mutate(dayOfWeek = fct_recode(factor(dayOfWeek),
"Monday" = "1",
"Tuesday" = "2",
"Wednesday" = "3",
"Thursday" = "4",
"Friday" = "5",
"Saturday" = "6",
"Sunday" = "7"))
ggplot(ave_delay_carrier) +
geom_bar(aes(x = dayOfWeek,
y = aveDelay,
fill = uniqueCarrier),
stat = 'identity') +
facet_wrap(~uniqueCarrier) +
coord_flip() + theme_minimal() + guides(fill = FALSE) +
labs(title = "Average Delay by Carrier and Day of Week",
subtitle = "(minutes)",
xlab = "Minutes",
ylab = "Carrier")
aircodes <- spark_read_json(sc, name = "aircodes", path = "file://datapackage.json")
aircodes <- spark_read_json(sc, name = "aircodes", path = "file:///datapackage.json")
list.files()
aircodes <- spark_read_json(sc, name = "aircodes", path = "file://./datapackage.json")
airports <- read.dat("https://raw.githubusercontent.com/jpatokal/openflights/master/data/airports.dat",
header = F)
airports <- read.table("https://raw.githubusercontent.com/jpatokal/openflights/master/data/airports.dat",
header = F)
airports <- read.table(url("https://raw.githubusercontent.com/jpatokal/openflights/master/data/airports.dat"),
header = F)
install.packages('curl')
airports <- read.table(url("https://raw.githubusercontent.com/jpatokal/openflights/master/data/airports.dat"),
header = F)
install.packages('httr')
airports <- read.table("airports.dat", header = F)
airports <- read.table("airports.dat", header = F, fill = TRUE)
airports %>% head
airports <- read.table("airports.dat", header = F, fill = TRUE, sep = ",")
airports %>% head
airports <- read.table("airports.dat", header = F, sep = ",")
airports %>% head
airportsDF <- copy_to(sc, airports, "airports")
airportsDF
airportsDF %>% collect(1)
airportsDF %>% keep(1)
airportsDF %>% head(1)
airportsDF %>% head(1) %>% as.dat.aframe
airportsDF %>% head(1) %>% as.data.frame
rename(airportsDF,
airportID = V1,
airportName = V2,
City = V3,
Country = V4,
airportIATA = V5,
airportICAO = V6,
latitude = V7,
longitude = V8,
altitude = V9,
timezone = V10,
DST = V11,
TZdb = V12,
Type = V13,
Source = V14)
airportsDF <- rename(airportsDF,
airportID = V1,
airportName = V2,
City = V3,
Country = V4,
airportIATA = V5,
airportICAO = V6,
latitude = V7,
longitude = V8,
altitude = V9,
timezone = V10,
DST = V11,
TZdb = V12,
Type = V13,
Source = V14)
airWeatherDF
origins <- left_merge(airWeatherDF %>% select(originAirportId),
airportsDF %>% select(airportID, airportName, longitude, latitude),
by = c("originAirportId" = "airportID"))
origins <- left_join(airWeatherDF %>% select(originAirportId),
airportsDF %>% select(airportID, airportName, longitude, latitude),
by = c("originAirportId" = "airportID"))
dest <- left_join(airWeatherDF %>% select(destAirportId),
airportsDF %>% select(airportID, airportName, longitude, latitude),
by = c("originAirportId" = "airportID"))
dest
origin
origins
origins %>% filter(!is.na(airportID))
dest <- left_join(airWeatherDF %>% select(destAirportId),
airportsDF %>% select(airportID, airportName, longitude, latitude),
by = c("destAirportId" = "airportID"))
dest
origin_tbl <- origins %>% filter(!is.na(airportID))
dest_tbl <- dest %>% filter(!is.na(airportID))
origin_tbl <- origins %>% filter(!is.na(airportID)) %>% collect
dest_tbl <- dest %>% filter(!is.na(airportID)) %>% collect
if(!require("devtools")) install.packages("devtools")
devtools::install_github("bwlewis/rthreejs")
library(threejs)
earth <- system.file("images/world.jpg",  package="threejs")
?globejs
codes <- bind_cols(origin_tbl, dest_tbl)
origin_tbl <- origins  %>% collect
dest_tbl <- dest  %>% collect
codes <- bind_cols(origin_tbl, dest_tbl)
codes
codes %>% filter(!is.na(longitude))
tibble::repair_names(codes)
codes <- bind_cols(origin_tbl, dest_tbl) %>% repair_names
codes
codes <- codes %>% filter(!is.na(airportID, airportID1))
codes <- codes %>% filter(!is.na(airportID), !is.na(airportID1))
flights <- codes %>% select(latitude, longitude, latitude1, longitude1)
globejs(img=earth, arcs=flights,
arcsHeight=0.3, arcsLwd=2, arcsColor="#ffff00", arcsOpacity=0.15,
atmosphere=TRUE)
flights
flights %>% distinct()
r <- getOption("repos")
mran_date <- Sys.Date() - 1
r[["CRAN"]] <- paste0("https://mran.revolutionanalytics.com/snapshot/", mran_date)
options(repos = r)
install.packages("rmarkdown", "knitr")
install.packages(c("rmarkdown", "knitr"))
install.packages("formatR")
translate_sql( weatherDF %>%
group_by(AdjustedYear, AdjustedMonth, AdjustedDay, AdjustedHour, AirportID) %>%
summarise(Visibility = mean(Visibility),
DryBulbCelsius = mean(DryBulbCelsius),
DewPointCelsius = mean(DewPointCelsius),
RelativeHumidity = mean(RelativeHumidity),
WindSpeed = mean(WindSpeed),
Altimeter = mean(Altimeter)))
translate_sql( weatherDF %>%
group_by(AdjustedYear, AdjustedMonth, AdjustedDay, AdjustedHour, AirportID) %>%
summarise(Visibility = mean(Visibility),
DryBulbCelsius = mean(DryBulbCelsius),
DewPointCelsius = mean(DewPointCelsius),
RelativeHumidity = mean(RelativeHumidity),
WindSpeed = mean(WindSpeed),
Altimeter = mean(Altimeter)))
translate_sql(summarise(group_by(AdjustedYear, AdjustedMonth, AdjustedDay, AdjustedHour, AirportID), Visibility = mean(Visibility)))
source('~/sparklyr/2-EDA-with-sparklyr.R')
spark_disconnect(sc)
